module Day2 where

import Prelude

import Data.Either as E
import Data.Foldable (foldl)
import Data.List (List(..), (:))
import Data.List.NonEmpty (NonEmptyList, toList)
import Data.Maybe (Maybe(..))
import Data.Traversable (sequence)
import Effect (Effect)
import Effect.Console (log)
import Text.Parsing.StringParser (runParser, ParseError)
import Text.Parsing.StringParser.CodeUnits (anyChar)
import Text.Parsing.StringParser.Combinators (many1)

data Pair = Pair Int Int

instance showPair :: Show Pair where
  show (Pair x y) = "[" <> show x <> "," <> show y <> "]"

type Button = Pair
type Focus = Pair

focusValue :: Focus -> Int
focusValue f = case f of
  (Pair -1  1) -> 1
  (Pair  0  1) -> 2
  (Pair  1  1) -> 3
  (Pair -1  0) -> 4
  (Pair  0  0) -> 5
  (Pair  1  0) -> 6
  (Pair -1 -1) -> 7
  (Pair  0 -1) -> 8
  (Pair  1 -1) -> 9
  (Pair  _  _) -> 0

data Direction
  = Up
  | Left
  | Down
  | Right

fromChar :: Char -> Maybe Direction
fromChar s = case s of
  'U' -> Just Up
  'L' -> Just Left
  'D' -> Just Down
  'R' -> Just Right
  _   -> Nothing

translateFocus :: Focus -> Direction -> Focus
translateFocus (Pair x y) Up    = Pair x                  (min (y + 1) 1)
translateFocus (Pair x y) Down  = Pair x                  (max (y - 1) (-1))
translateFocus (Pair x y) Right = Pair (min (x + 1) 1)    y
translateFocus (Pair x y) Left  = Pair (max (x - 1) (-1)) y

runTranslations :: Focus -> List Direction -> Focus
runTranslations f ds = foldl translateFocus f ds

parseDirections :: E.Either ParseError (NonEmptyList Char) -> Maybe (List Direction)
parseDirections (E.Left error) = Nothing
parseDirections (E.Right chars) = sequence $ fromChar <$> toList chars

parseLine :: String -> Maybe (List Direction)
parseLine line = parseDirections $ runParser (many1 anyChar) line

day2' :: Maybe (Array Int)
day2' = do
  let initialFocus = Pair 0 0
  let dirs1 = parseLine "URULLLLLRLDDUURRRULLLDURRDRDRDLURURURLDLLLLRUDDRRLUDDDDDDLRLRDDDUUDUDLDULUDLDURDULLRDDURLLLRRRLLRURLLUDRDLLRRLDDRUDULRRDDLUUUDRLDLURRRULURRDLLLDDDLUDURDDRLDDDLLRULDRUDDDLUDLURUDLLRURRUURUDLLLUUUUDDURDRDDDLDRRUDURDLLLULUDURURDUUULRULUDRUUUUDLRLUUUUUDDRRDDDURULLLRRLDURLDLDRDLLLUULLRRLLLLDRLRDRRDRRUDDLULUUDDDDRRUUDDLURLRDUUDRRLDUDLRRRLRRUUDURDRULULRDURDRRRDLDUUULRDDLRLRDLUUDDUDDRLRRULLLULULLDDDRRDUUUDDRURDDURDRLRDLDRDRULRLUURUDRLULRLURLRRULDRLRDUDLDURLLRLUDLUDDURDUURLUDRLUL"
  let dirs2 = parseLine "LLLUUURUULDDDULRRDLRLLLLLLLLRURRDLURLUDRRDDULDRRRRRRLDURRULDDULLDDDRUUDLUDULLDLRRLUULULRULURDURLLDULURDUDLRRLRLLDULLRLDURRUULDLDULLRDULULLLULDRLDLDLDLDDLULRLDUDRULUDDRDDRLRLURURRDULLUULLDRRDRRDLDLLRDLDDUUURLUULDDRRRUULDULDDRDDLULUDRURUULLUDRURDRULDRUULLRRDURUDDLDUULLDDRLRRDUDRLRRRLDRLRULDRDRRUDRLLLDDUDLULLURRURRLUURDRLLDLLDUDLUUURRLRDDUDRLUDLLRULLDUUURDLUUUDUDULRLDLDRUUDULRDRRUDLULRLRDLDRRDDDUDLDLDLRUURLDLLUURDLDLRDLDRUDDUURLLLRDRDRRULLRLRDULUDDDLUDURLDUDLLRULRDURDRDLLULRRDLLLDUURRDUDDLDDRULRRRRLRDDRURLLRRLLL"
  let dirs3 = parseLine "DRURLDDDDRLUDRDURUDDULLRRLLRLDDRLULURLDURRLDRRLRLUURDDRRDLRDLDLULDURUDRLRUDULRURURLRUDRLLDDUDDRDLDRLLDDLRRDRUUULDUUDRUULRLLDLLULLLRRDRURDLDDRRDDUDDULLDUUULDRUDLDLURLDRURUDLRDDDURRLRDDUDLLLRRUDRULRULRRLLUUULDRLRRRLLLDLLDUDDUUDRURLDLRRUUURLUDDDRRDDLDDDDLUURDDULDRLRURLULLURRDRLLURLLLURDURLDLUDUUDUULLRLDLLLLULRDDLDUDUDDDUULURRLULDLDRLRDRLULLUDDUUUUURDRURLDUULDRRDULUDUDLDDRDLUDDURUDURLDULRUDRRDLRLRDRRURLDLURLULULDDUUDLRLLLLURRURULDDRUUULLDULDRDULDDDLLLRLULDDUDLRUDUDUDURLURLDDLRULDLURD"
  let dirs4 = parseLine "DRUDRDURUURDLRLUUUUURUDLRDUURLLDUULDUULDLURDDUULDRDDRDULUDDDRRRRLDDUURLRDLLRLRURDRRRDURDULRLDRDURUDLLDDULRDUDULRRLLUDLLUUURDULRDDLURULRURDDLRLLULUDURDRRUDLULLRLDUDLURUDRUULDUDLRDUDRRDULDDLDRLRRULURULUURDULRRLDLDULULRUUUUULUURLURLRDLLRRRRLURRUDLRLDDDLDRDRURLULRDUDLRLURRDRRLRLLDLDDLLRRULRLRLRUDRUUULLDUULLDDRLUDDRURLRLDLULDURLLRRLDLLRDDDUDDUULLUDRUDURLLRDRUDLUDLLUDRUUDLRUURRRLLUULLUUURLLLRURUULLDLLDURUUUULDDDLRLURDRLRRRRRRUDLLLRUUULDRRDLRDLLDRDLDDLDLRDUDLDDRDDDDRULRRLRDULLDULULULRULLRRLLUURUUUDLDLUDUDDDLUUDDDDUDDDUURUUDRDURRLUULRRDUUDDUDRRRDLRDRLDLRRURUUDRRRUUDLDRLRDURD"
  let dirs5 = parseLine "DDDLRURUDRRRURUUDLRLRDULDRDUULRURRRUULUDULDDLRRLLRLDDLURLRUDRLRRLRDLRLLDDLULDLRRURDDRDLLDDRUDRRRURRDUDULUDDULRRDRLDUULDLLLDRLUDRDURDRRDLLLLRRLRLLULRURUUDDRULDLLRULDRDLUDLULDDDLLUULRRLDDUURDLULUULULRDDDLDUDDLLLRRLLLDULRDDLRRUDDRDDLLLLDLDLULRRRDUDURRLUUDLLLLDUUULDULRDRULLRDRUDULRUUDULULDRDLDUDRRLRRDRLDUDLULLUDDLURLUUUDRDUDRULULDRDLRDRRLDDRRLUURDRULDLRRLLRRLDLRRLDLDRULDDRLURDULRRUDURRUURDUUURULUUUDLRRLDRDLULDURUDUDLUDDDULULRULDRRRLRURLRLRLUDDLUUDRRRLUUUDURLDRLRRDRRDURLLL"
  focus1 <- runTranslations initialFocus <$> dirs1
  focus2 <- runTranslations focus1 <$> dirs2
  focus3 <- runTranslations focus2 <$> dirs3
  focus4 <- runTranslations focus3 <$> dirs4
  focus5 <- runTranslations focus4 <$> dirs5
  pure $ focusValue <$> [focus1, focus2, focus3, focus4, focus5]

day2 :: Effect Unit
day2 = do
  let answer = day2'
  log $ show $ answer
